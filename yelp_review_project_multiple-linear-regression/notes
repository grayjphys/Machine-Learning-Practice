yelp_tip.json
yelp_photo.json
yelp_review.json
yelp_user.json
yelp_data.json
yelp_checkin.json
yelp_business.json

pd.options.display.max_columns = number_of_columns_to_display
pd.options.display.max_colwidth = number_of_characters_to_display

## Get data from dataframe
df_data = pd.read_json("yelp_data.json",lines="True")
#needs lines to read each line as a separate json statement

printi,df_user[i].min(), df_user[i].max())

## Get specific value of stars for a know business based on its id
df_business[df_business['business_id'] == '5EvUIR4IzCWUOm0PsUZXjA']['stars']

## Join two dataframes
df = pd.merge(df_business, df_review, how='left',on='business_id',suffixes=('', '_y'))
df.drop(df.filter(regex='_y$').columns.tolist(),axis=1, inplace=True)
# needs the suffix section and the drop section!!! very important to reduce clutter.

## Check what columns have NaN values
df.isna().any()

## Replace column's NaN values with 0 if it makes sense to
df.fillna({
'average_tip_length': 0,
'number_tips': 0,
'average_caption_length': 0,
'number_pics': 0,
'weekday_checkins': 0,
'weekend_checkins': 0
},inplace=True)

## Look at correlations between columns
df.corr()

## split data into training and testing sets
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(features, ratings, test_size = 0.2, random_state = 1)

## make model, fit it, and score it
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X_train, y_train)
model.score(X_test,y_test)

## look at how well each feature predicts
print(model.coef_)


## takes feature list and builds a model/ gives scoring.

def model_these_features(feature_list):
    
    # 
    ratings = df.loc[:,'stars']
    features = df.loc[:,feature_list]
    
    # 
    X_train, X_test, y_train, y_test = train_test_split(features, ratings, test_size = 0.2, random_state = 1)
    
    # don't worry too much about these lines, just know that they allow the model to work when
    # we model on just one feature instead of multiple features. Trust us on this one :)
    if len(X_train.shape) < 2:
        X_train = np.array(X_train).reshape(-1,1)
        X_test = np.array(X_test).reshape(-1,1)
    
    # 
    model = LinearRegression()
    model.fit(X_train,y_train)
    
    # 
    print('Train Score:', model.score(X_train,y_train))
    print('Test Score:', model.score(X_test,y_test))
    
    # print the model features and their corresponding coefficients, from most predictive to least predictive
    print(sorted(list(zip(feature_list,model.coef_)),key = lambda x: abs(x[1]),reverse=True))
    
    # 
    y_predicted = model.predict(X_test)
    
    # 
    plt.scatter(y_test,y_predicted)
    plt.xlabel('Yelp Rating')
    plt.ylabel('Predicted Yelp Rating')
    plt.ylim(1,5)
    plt.show()